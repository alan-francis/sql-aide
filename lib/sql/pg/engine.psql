\set dcp_extensions dcp_extensions
\set dcp_experimental dcp_experimental
\set dcp_lib dcp_lib
\set dcp_lifecycle dcp_lifecycle
\set dcp_assurance_engineering dcp_assurance_engineering

CREATE SCHEMA IF NOT EXISTS dcp_extensions;
CREATE EXTENSION IF NOT EXISTS pgtap SCHEMA dcp_extensions;
CREATE EXTENSION IF NOT EXISTS pg_stat_statements SCHEMA dcp_extensions;
CREATE EXTENSION IF NOT EXISTS ltree SCHEMA dcp_extensions;
CREATE EXTENSION IF NOT EXISTS semver SCHEMA dcp_extensions;
CREATE EXTENSION IF NOT EXISTS is_jsonb_valid SCHEMA dcp_extensions;

-- make sure everybody can use everything in the extensions schema
grant usage on schema dcp_extensions to public;
grant execute on all functions in schema dcp_extensions to public;

-- include future extensions
alter default privileges in schema dcp_extensions
  grant execute on functions to public;

alter default privileges in schema dcp_extensions
  grant usage on types to public;

SELECT format('
        CREATE OR REPLACE PROCEDURE %1$s.engine_construct_idempotent() AS $$
        BEGIN
            CALL %1$s.version_construct(''%1$s'', ''asset_version'', ''asset'', NULL, ''1.0.0''::%5$s.semver);
            insert into asset_version (nature, asset, version) values (''storage'', %1$s.asset_version_store, %1$s.asset_version_initial_revision());
            insert into asset_version (nature, asset, version) values (''storage'', %1$s.asset_version_label_store, %1$s.asset_version_initial_revision());
            insert into asset_version (nature, asset, version) values (''storage'', %1$s.asset_version_history, %1$s.asset_version_initial_revision());
            CALL %1$s.event_manager_construct(''%1$s'', ''activity'', ''event'', ''lifecycle'');
        END;
        $$ LANGUAGE PLPGSQL;

        CREATE OR REPLACE PROCEDURE %1$s.engine_destroy_idempotent() AS $$
        BEGIN
            DROP SCHEMA IF EXISTS %2$s CASCADE;
            DROP SCHEMA IF EXISTS %3$s CASCADE;
            DROP SCHEMA IF EXISTS %4$s CASCADE;
        END;
        $$ LANGUAGE PLPGSQL;
        --
        -- source: https://stackoverflow.com/questions/7622908/drop-function-without-knowing-the-number-type-of-parameters
        --
        CREATE OR REPLACE FUNCTION %1$s.drop_all_functions_with_name(function_name text) RETURNS text AS $$
        DECLARE
            funcrow RECORD;
            numfunctions smallint := 0;
            numparameters int;
            i int;
            paramtext text;
        BEGIN
            FOR funcrow IN SELECT proargtypes FROM pg_proc WHERE proname = function_name LOOP
                --for some reason array_upper is off by one for the oidvector type, hence the +1
                numparameters = array_upper(funcrow.proargtypes, 1) + 1;
                i = 0;
                paramtext = '''';
                LOOP
                    IF i < numparameters THEN
                        IF i > 0 THEN
                            paramtext = paramtext || '', '';
                        END IF;
                        paramtext = paramtext || (SELECT typname FROM pg_type WHERE oid = funcrow.proargtypes[i]);
                        i = i + 1;
                    ELSE
                        EXIT;
                    END IF;
                END LOOP;
                EXECUTE ''DROP FUNCTION '' || function_name || ''('' || paramtext || '');'';
                numfunctions = numfunctions + 1;
            END LOOP;
        RETURN ''Dropped '' || numfunctions || '' functionNames'';
        END;
        $$ LANGUAGE plpgsql VOLATILE COST 100;
        CREATE OR REPLACE FUNCTION %1$s.test_engine_version() RETURNS SETOF TEXT LANGUAGE plpgsql AS $$
        BEGIN
            RETURN NEXT ok(pg_version_num() > 13000,
            format(''PostgreSQL engine instance versions should be at least 13000 [%s]'', pg_version()));
            RETURN NEXT  has_function( ''%1$s''::name, ''drop_all_functions_with_name''::name );

        END;$$;',:'dcp_lifecycle',:'dcp_experimental',:'dcp_assurance_engineering',:'dcp_lib',:'dcp_extensions')
AS dql_dyn_exec; \gexec


--call :dcp_lifecycle.engine_construct_idempotent();

-- SELECT * FROM dcp_extensions.runtests(:'dcp_lifecycle'::name,'test_engine_version'::name);