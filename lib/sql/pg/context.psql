\set dcp_context dcp_context
\set dcp_extensions dcp_extensions
\set dcp_assurance_engineering dcp_assurance_engineering
\set dcp_lib dcp_lib
\set dcp_confidential dcp_confidential
\set dcp_experimental dcp_experimental
\set dcp_lifecycle dcp_lifecycle
CREATE SCHEMA IF NOT EXISTS :"dcp_context";
SET search_path TO :'dcp_context', :'dcp_extensions';
CREATE SCHEMA IF NOT EXISTS :"dcp_extensions";
CREATE EXTENSION IF NOT EXISTS ltree SCHEMA :"dcp_extensions";

CREATE SCHEMA IF NOT EXISTS :"dcp_lifecycle";
CREATE SCHEMA IF NOT EXISTS :"dcp_lib";
CREATE SCHEMA IF NOT EXISTS :"dcp_confidential";
CREATE SCHEMA IF NOT EXISTS :"dcp_assurance_engineering";
CREATE SCHEMA IF NOT EXISTS :"dcp_experimental";

\set code 'BEGIN CREATE DOMAIN ':dcp_context'.execution_context as' :dcp_extensions'.ltree; EXCEPTION WHEN DUPLICATE_OBJECT THEN RAISE NOTICE '' domain "execution_context" already exists, skipping ''; END'
DO :'code';

SELECT format('
CREATE OR REPLACE PROCEDURE %1$s.dcp_context_construct_storage() AS $$
    BEGIN
        BEGIN CREATE DOMAIN %2$s.execution_host_identity as text;EXCEPTION WHEN duplicate_object THEN RAISE NOTICE ''domain "execution_host_identity" already exists, skipping''; END;

        -- a single-row table which contains the global context (prod/test/devl/sandbox/etc.)
        CREATE TABLE IF NOT EXISTS %2$s.context (
            singleton_id bool PRIMARY KEY DEFAULT TRUE,
            active %2$s.execution_context NOT NULL,
            host %2$s.execution_host_identity NOT NULL,
            CONSTRAINT context_unq CHECK (singleton_id)
        );    
    END;
    $$ LANGUAGE PLPGSQL;

    CREATE OR REPLACE PROCEDURE %1$s.dcp_context_construct_idempotent() AS $$
    BEGIN
        CREATE OR REPLACE FUNCTION %2$s.exec_context_production() RETURNS %2$s.execution_context LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT ''''production''''::%2$s.execution_context'';
        CREATE OR REPLACE FUNCTION %2$s.exec_context_test() RETURNS %2$s.execution_context LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT ''''test''''::%2$s.execution_context'';
        CREATE OR REPLACE FUNCTION %2$s.exec_context_devl() RETURNS %2$s.execution_context LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT ''''devl''''::%2$s.execution_context'';
        CREATE OR REPLACE FUNCTION %2$s.exec_context_sandbox() RETURNS %2$s.execution_context LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT ''''sandbox''''::%2$s.execution_context'';
        CREATE OR REPLACE FUNCTION %2$s.exec_context_experimental() RETURNS %2$s.execution_context LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT ''''experimental''''::%2$s.execution_context'';

        CREATE OR REPLACE FUNCTION %2$s.is_exec_context_production(ec %2$s.execution_context) RETURNS boolean LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT CASE WHEN $1 OPERATOR(%4$s.=) %2$s.exec_context_production() THEN true else false end'';
        CREATE OR REPLACE FUNCTION %2$s.is_exec_context_test(ec %2$s.execution_context) RETURNS boolean LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT CASE WHEN $1 OPERATOR(%4$s.=) %2$s.exec_context_test() THEN true else false end'';
        CREATE OR REPLACE FUNCTION %2$s.is_exec_context_devl(ec %2$s.execution_context) RETURNS boolean LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT CASE WHEN $1 OPERATOR(%4$s.=) %2$s.exec_context_devl() THEN true else false end'';
        CREATE OR REPLACE FUNCTION %2$s.is_exec_context_sandbox(ec %2$s.execution_context) RETURNS boolean LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT CASE WHEN $1 OPERATOR(%4$s.=) %2$s.exec_context_sandbox() THEN true else false end'';
        CREATE OR REPLACE FUNCTION %2$s.is_exec_context_experimental(ec %2$s.execution_context) RETURNS boolean LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT CASE WHEN $1 OPERATOR(%4$s.=) %2$s.exec_context_experimental() THEN true else false end'';

        CREATE OR REPLACE FUNCTION %2$s.is_active_context_production() RETURNS boolean LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT CASE WHEN active OPERATOR(%4$s.=) %2$s.exec_context_production() THEN true else false end from %2$s.context where singleton_id = true'';
        CREATE OR REPLACE FUNCTION %2$s.is_active_context_test() RETURNS boolean LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT CASE WHEN active OPERATOR(%4$s.=) %2$s.exec_context_test() THEN true else false end from %2$s.context where singleton_id = true'';
        CREATE OR REPLACE FUNCTION %2$s.is_active_context_devl() RETURNS boolean LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT CASE WHEN active OPERATOR(%4$s.=) %2$s.exec_context_devl() THEN true else false end from %2$s.context where singleton_id = true'';
        CREATE OR REPLACE FUNCTION %2$s.is_active_context_sandbox() RETURNS boolean LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT CASE WHEN active OPERATOR(%4$s.=) %2$s.exec_context_sandbox() THEN true else false end from %2$s.context where singleton_id = true'';
        CREATE OR REPLACE FUNCTION %2$s.is_active_context_experimental() RETURNS boolean LANGUAGE sql IMMUTABLE PARALLEL SAFE AS ''SELECT CASE WHEN active OPERATOR(%4$s.=) %2$s.exec_context_experimental() THEN true else false end from %2$s.context where singleton_id = true'';
    END;
    $$ LANGUAGE PLPGSQL;

    CREATE OR REPLACE PROCEDURE %1$s.dcp_context_destroy_idempotent() AS $$
    BEGIN
        DROP FUNCTION IF EXISTS %3$s.test_dcp_context();
        DROP FUNCTION IF EXISTS %2$s.exec_context_production();
        DROP FUNCTION IF EXISTS %2$s.exec_context_test();
        DROP FUNCTION IF EXISTS %2$s.exec_context_devl();
        DROP FUNCTION IF EXISTS %2$s.exec_context_sandbox();
        DROP FUNCTION IF EXISTS %2$s.exec_context_experimental();
        DROP FUNCTION IF EXISTS %2$s.is_exec_context_production();
        DROP FUNCTION IF EXISTS %2$s.is_exec_context_test();
        DROP FUNCTION IF EXISTS %2$s.is_exec_context_devl();
        DROP FUNCTION IF EXISTS %2$s.is_exec_context_sandbox();
        DROP FUNCTION IF EXISTS %2$s.is_exec_context_experimental();
        DROP FUNCTION IF EXISTS %2$s.is_active_context_production();
        DROP FUNCTION IF EXISTS %2$s.is_active_context_test();
        DROP FUNCTION IF EXISTS %2$s.is_active_context_devl();
        DROP FUNCTION IF EXISTS %2$s.is_active_context_sandbox();
        DROP FUNCTION IF EXISTS %2$s.is_active_context_experimental();
    END;
    $$ LANGUAGE PLPGSQL;
    CREATE OR REPLACE FUNCTION %3$s.test_dcp_context() RETURNS SETOF TEXT LANGUAGE plpgsql AS $$
    BEGIN
        RETURN NEXT has_function(''%2$s''::name, ''exec_context_production''::name);
        RETURN NEXT has_function(''%2$s''::name, ''exec_context_test''::name);
        RETURN NEXT has_function(''%2$s''::name, ''exec_context_devl''::name);
        RETURN NEXT has_function(''%2$s''::name, ''exec_context_sandbox''::name);
        RETURN NEXT has_function(''%2$s''::name, ''exec_context_experimental''::name);
        RETURN NEXT has_function(''%2$s''::name, ''is_exec_context_production''::name);
        RETURN NEXT has_function(''%2$s''::name, ''is_exec_context_test''::name);
        RETURN NEXT has_function(''%2$s''::name, ''is_exec_context_devl''::name);
        RETURN NEXT has_function(''%2$s''::name, ''is_exec_context_sandbox''::name);
        RETURN NEXT has_function(''%2$s''::name, ''is_exec_context_experimental''::name);
        RETURN NEXT has_function(''%2$s''::name, ''is_active_context_production''::name);
        RETURN NEXT has_function(''%2$s''::name, ''is_active_context_test''::name);
        RETURN NEXT has_function(''%2$s''::name, ''is_active_context_devl''::name);
        RETURN NEXT has_function(''%2$s''::name, ''is_active_context_sandbox''::name);
        RETURN NEXT has_function(''%2$s''::name, ''is_active_context_experimental''::name);
    END;
    $$;
    ', :'dcp_lifecycle',:'dcp_context',:'dcp_assurance_engineering',:'dcp_extensions')
AS dql_dyn_exec; \gexec

--call :dcp_lifecycle.dcp_context_construct_storage();
--call :dcp_lifecycle.dcp_context_construct_idempotent();


--SELECT * FROM dcp_extensions.runtests(:'dcp_assurance_engineering'::name,'test_dcp_context'::name);


