\set unit_test_schema dcp_assurance

-- In PostgreSQL, creating a generic upsert function that works for any table
-- is not straightforward due to the strong type safety and type checking. You
-- can't simply create a stored function that accepts any table and column,
-- because PostgreSQL needs to know at the time of function creation what the
-- table and column types are, and it doesn't support a universal table row
-- type. Also, the ON CONFLICT clause requires knowledge of which columns make
-- up the unique or primary key of the table.

-- However, you can create a function generator that generates an upsert
-- function for a specific table and its unique or primary key.

-- First (one) time, generate the necessary function:
--    SELECT execute_generated_upsert_sql(generate_upsert_sql('my_table'));

-- Then, for rows with unique values or inserts (don't pass in PK for auto-inc inserts):
--    SELECT * FROM upsert_my_table(('John Doe', 'john.doe@example.com')::upsert_my_table);
--
-- If you know the PK value, pass it in:
--    SELECT * FROM upsert_my_table((1, 'John Doe', 'john.doe@example.com')::my_table);

CREATE OR REPLACE FUNCTION generate_upsert_sql(schema_name text, tablename text)
    RETURNS text
AS
$$
DECLARE
    _table_cols text;
    _uniquekey_cols text;
    _qualified_table text = schema_name || '.' || tablename;
BEGIN
    -- Find the primary key columns
   SELECT string_agg(column_name, ', ')
    INTO _uniquekey_cols
    FROM information_schema.key_column_usage
    WHERE constraint_name IN (
    SELECT constraint_name
    FROM information_schema.table_constraints
            WHERE
                table_name = tablename
                AND constraint_type = 'UNIQUE'
        )
        AND table_name = tablename;

    -- Find all the columns of the table
    SELECT string_agg(column_name, ', ')
    INTO _table_cols
    FROM information_schema.columns
    WHERE table_schema = schema_name AND table_name = tablename;

    RETURN format(
        'CREATE OR REPLACE FUNCTION %1$I.upsert_%2$I(_new %1$I.%2$I) ' ||
        'RETURNS %1$I.%2$I AS ' ||
        '$func$ ' ||
        'DECLARE ' ||
             'result %1$I.%2$I; ' ||
        'BEGIN ' ||
            'INSERT INTO %1$I.%2$I(%4$s) ' ||
            'VALUES((_new).*) ' ||
            'ON CONFLICT (%5$s) DO UPDATE ' ||
            'SET (%4$s) = ROW((_new).*) ' ||
            'RETURNING * INTO result; ' ||
            'RETURN result; ' ||
             'END ' ||
        '$func$ LANGUAGE plpgsql;',
        schema_name, tablename, _qualified_table, _table_cols, _uniquekey_cols);
END
$$
LANGUAGE plpgsql;

-- this is a very simple function for now but might have feature flags in the
-- future
CREATE OR REPLACE FUNCTION execute_generated_upsert_sql(sql_statement text) RETURNS void AS $$
BEGIN
    EXECUTE sql_statement;
END
$$ LANGUAGE plpgsql;

BEGIN;

CREATE EXTENSION IF NOT EXISTS pgtap;

-- Prepare some data for testing
CREATE SCHEMA IF NOT EXISTS :unit_test_schema;

CREATE TABLE IF NOT EXISTS :unit_test_schema.test_user (
    id serial PRIMARY KEY,
    name text,
    email text UNIQUE
);

INSERT INTO :unit_test_schema.test_user (name, email)
VALUES
('John Doe', 'john.doe@example.com'),
('Jane Doe', 'jane.doe@example.com')
ON CONFLICT DO NOTHING;

-- Generate the upsert function for testing
SELECT execute_generated_upsert_sql(generate_upsert_sql(:'unit_test_schema', 'test_user'));

-- Tests
SELECT plan(3);

-- Test that the function exists
SELECT has_function(:'unit_test_schema', 'upsert_test_user');

-- Test that the function updates existing records correctly
SELECT is(
    (
        SELECT email FROM :unit_test_schema.upsert_test_user((1, 'Updated Name', 'john.doe@example.com'):::"unit_test_schema".test_user)
    ),
    'john.doe@example.com',
    'Updates existing record correctly'
);

-- Test that the function inserts new records correctly
SELECT is(
    (
        SELECT email FROM :unit_test_schema.upsert_test_user((3, 'New User', 'new.user@example.com'):::"unit_test_schema".test_user)
    ),
    'new.user@example.com',
    'Inserts new record correctly'
);

SELECT * FROM finish();

ROLLBACK;
