name: assurance

on:
  push:
    branches:
      - main
      - master

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@master

      # see https://github.com/denoland/setup-deno
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - run: deno --version

      - run: deno task doctor

      - uses: pkgxdev/setup@v1
        with: 
          +: sqlite3@3.43

      - run: |
          sqlite3 --version
          echo "PRAGMA compile_options;" | sqlite3
          echo "PRAGMA compile_options;" | sqlite3 | grep -q 'ENABLE_JSON1' && echo 'JSON1 extension is enabled' || echo 'JSON1 extension is NOT enabled'
          echo "SELECT json('{\"foo\":\"bar\"}');" | sqlite3 || (echo 'JSON functions are NOT supported' && false)

      # syntax check all files in case tests don't exist
      - run: deno check --no-lock $(find . -name '*.ts' -not -path './support/*')

      # Run all test files in the repository and collect code coverage.
      # The example runs with all permissions, but it is recommended to run
      # with the minimal permissions your program needs (for example --allow-read).
      - run: deno test --allow-all --coverage=coverage --v8-flags="--max-old-space-size=4096" 

      # This generates a report from the collected coverage in `deno test --coverage`.
      # It is stored as a .lcov file which integrates well with services such
      # as Codecov, Coveralls and Travis CI.
      - run: deno coverage ./coverage --lcov > coverage.lcov

      - name: Collect coverage
        uses: codecov/codecov-action@v3 # upload the report on Codecov
        with:
          file: ./coverage.lcov

      # Check if the code is formatted according to Deno's default formatting conventions.
      - run: deno fmt --check --ignore="support"

      # Scan the code for syntax errors and style issues.
      - run: deno lint --ignore="support"
